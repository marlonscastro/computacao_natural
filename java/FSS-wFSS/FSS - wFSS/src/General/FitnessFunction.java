package General;

import General.Run;

public class FitnessFunction {
	public static double calculateFitness(double[] doubles){
		switch(Run.FITNESS_FUNCTION){
		case 1:
			return sphere(doubles);
		case 2:
			return rastrigin(doubles);
		case 3:
			return rosenbrock(doubles);
		case 4:
			return diffPowers(doubles);
		case 5:
			return zakharov(doubles);
		case 6:
			return uniformDiskPlateau(doubles, Run.NUMBER_OF_DISKS, Run.HIGHEST_SPACE_BOUNDARY);
		case 7:
			return fibonacciDiskPlateau(doubles, Run.NUMBER_OF_DISKS, Run.HIGHEST_SPACE_BOUNDARY);
		case 8:
			return uniformSquarePlateau(doubles, Run.NUMBER_OF_DISKS, Run.HIGHEST_SPACE_BOUNDARY);
		case 9:
			return michalewicz(doubles);
		case 10:
			return easom(doubles);
		case 11:
			return C01(doubles);
		case 12:
			return C02(doubles);
		case 13:
			return C03(doubles);
		case 14:
			return C04(doubles);
		case 15:
			return C05(doubles);
		case 16:
			return C06(doubles);
		case 17:
			return C07(doubles);
		case 18:
			return C08(doubles);
		case 19:
			return C09(doubles);
		case 20:
			return C10(doubles);
		case 21:
			return C11(doubles);
		case 22:
			return C12(doubles);
		case 23:
			return C13(doubles);
		case 24:
			return C14(doubles);
		case 25:
			return C15(doubles);
		case 26:
			return C16(doubles);
		case 27:
			return C17(doubles);
		case 28:
			return C18(doubles);
		case 29:
			return test(doubles);
		default:
			return 0.0;
		}		
	}
	
	private static double easom(double[] doubles) {
		
		double fitness = 0;
		
		fitness=Math.cos(doubles[0])*Math.cos(doubles[1])*Math.exp(-Math.pow(doubles[0]-Math.PI, 2)-Math.pow(doubles[1]-Math.PI, 2));
		
		return fitness;
	}

	private static double michalewicz(double[] doubles) {
		double fitness = 0;
		double m = 10;
		
		for(int i=0; i<doubles.length;i++){
			fitness+=Math.sin(doubles[i])*Math.pow(Math.sin((i*Math.pow(doubles[i], 2))/Math.PI), 2*m);
		}
		
		return fitness;
	}

	public static double rastrigin(double[] doubles) {
		 double fitness = 0.0;
		 for(int i = 0; i < doubles.length; i++){
			 fitness += (10.0 + (doubles[i] * doubles[i] - 10.0 * Math.cos(2.0 * Math.PI * doubles[i])));
		 }
		//The function is returning a negative value so that the problem becomes a maximization problem.
		 return (-fitness);
	}
	
	public static double sphere(double[] doubles) {
		 double fitness = 0.0;
		 for(int i = 0; i < doubles.length; i++){
			 fitness += (doubles[i] * doubles[i]);
		 }
		 //The function is returning a negative value so that the problem becomes a maximization problem.
		 return (-fitness);
	}
	
	public static double rosenbrock(double[] doubles) {
		
		double fitness = 0;
		
		for(int i = 0; i < doubles.length-1; i++){
			double x = doubles[i];
			double xplus1 = doubles[i+1];
			fitness += Math.pow(1-x, 2) + 100*Math.pow(xplus1-Math.pow(x, 2), 2);
		}
		//The function is returning a negative value so that the problem becomes a maximization problem.
		return (-fitness);
	}
	
	public static double diffPowers(double[] position){
		
		double fitness = 0;
		int length = position.length;
		int alpha = 10;
		
		for(int i = 0; i < length; i++){
			// In the article, this function uses (i-1) and i starts at 1.
			// So, since here we have i starting at 0, we will use only i.
			fitness += Math.pow(position[i], (2 + alpha * ((i) / (length - 1))));
		}
		//The function is returning a negative value so that the problem becomes a maximization problem.
		return (-fitness);
	}
	
	public static double zakharov (double[] position){
		
		double fitness = sphere(position); // Sum of Xi ^ 2
		double auxiliar = 0;
		
		for(int i = 0; i < position.length; i++){
			auxiliar += 0.5 * (i + 1) * position[i];
		}
		
		fitness += Math.pow(auxiliar, 2);
		fitness += Math.pow(auxiliar, 4);
		
		return (-fitness);
	}
	
	public static int uniformDiskPlateau(double[] position, int numberOfDisks, double maxRadius){
		double positionRadius = calculateRadius(position);
		int step = 10;

		double squareFraction = maxRadius / numberOfDisks;

		return (Math.max((int)(-step*Math.ceil(positionRadius/squareFraction)), -step*numberOfDisks));
	}
	
	public static int fibonacciDiskPlateau (double[] position, int numberOfDisks, double maxRadius){
		int fibSum = 0;
		
		for(int i = 1; i <= numberOfDisks; i++){
			fibSum += pseudoFibonacci(i);
		}
		
		double radiusFraction = maxRadius / fibSum;
		
		double positionRadius = calculateRadius(position);
		
		int numberOfFractions = 0;
		
		for(int i = 1; i < numberOfDisks; i++){
			numberOfFractions += pseudoFibonacci(i);
			
			double radius = numberOfFractions * radiusFraction;
			
			if(positionRadius <= radius){
				return (-i * 10);
			}
		}
		
		return (-numberOfDisks * 10); // Default value, max result.
	}
	
	public static int uniformSquarePlateau(double[] position, int numberOfSquares, double maxRadius){

		double positionRadius = -1000000000000000.0;

		for(int i=0;i<position.length;i++){

			if(Math.abs(position[i])>positionRadius){
	
				positionRadius=Math.abs(position[i]);	
			}
		}

		int step = 10;

		double squareFraction = maxRadius / numberOfSquares;

		return (Math.max((int)(-step*Math.ceil(positionRadius/squareFraction)), -step*numberOfSquares));

	}	
	
	// It is called pseudo Fibonacci because it does not return 0 as a result.
	private static int pseudoFibonacci (int n){
		if(n <= 2){
			return 1;
		}
		else{
			return pseudoFibonacci(n-1) + pseudoFibonacci(n-2);
		}
	}
	
	private static double calculateRadius(double[] position){
		double result = 0;
		for(int i = 0; i < position.length; i++){
			result += Math.pow(position[i], 2);
		}
		
		return Math.sqrt(result);
	}
	
	private static double C01(double[] position){
		
		int nx = Run.DIMENSIONS;
		double[] x = position;
		
		int j;
		double f, f1, f2, f3;
		
		double[] e = new double[nx];
		double[] o = {0.030858718087483,	-0.078632292353156,	0.048651146638038,	-0.069089831066354,	-0.087918542941928,	0.088982639811141,	0.074143235639847,	-0.086527593580149,	-0.020616531903907,	0.055586106499231,	0.059285954883598,	-0.040671485554685,	-0.087399911887693,	-0.01842585125741,	-0.005184912793062,	-0.039892037937026,	0.036509229387458,	0.026046414854433,	-0.067133862936029,	0.082780189144943,	-0.049336722577062,	0.018503188080959,	0.051610619131255,	0.018613117768432,	0.093448598181657,	-0.071208840780873,	-0.036535677894572,	-0.03126128526933,	0.099243805247963,	0.053872445945574};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}
		   
		  /* objective function */
		f1 = 0.0;
		f2 = 1.0;
		f3 = 0.0;
		
		for (j = 0; j < nx; j++)
		{
			f1 = f1 + Math.pow(Math.cos(e[j]), 4);
		    f2 = f2 * Math.cos(e[j]) * Math.cos(e[j]);
		    f3 = f3 + ((double) (j + 1)) * e[j] * e[j];
		
		}
		f = Math.abs((f1 - 2 * f2) / Math.sqrt(f3));
		f = -f; 
		return f;
	}
	
	private static double C02(double[] position){
		
		int nx = Run.DIMENSIONS;
		double[] x = position;
		
		int j;
		double f, f1;
		
		double[] e = new double[nx];
		
		//double PI = 4.0 * Math.atan(1.0);
		double[] o = {-0.066939099286697,	0.470966419894494,	-0.490528349401176,	-0.312203454689423,	-0.124759576300523,	-0.247823908806285,	-0.448077079941866,	0.326494954650117,	0.493435908752668,	0.061699778818925,	-0.30251101183711,	-0.274045146932175,	-0.432969960330318,	0.062239193145781,	-0.188163731545079,	-0.100709842052095,	-0.333528971180922,	-0.496627672944882,	-0.288650116941944,	0.435648113198148,	-0.348261107144255,	0.456550427329479,	-0.286843419772511,	0.145639015401174,	-0.038656025783381,	0.333291935226012,	-0.293687524888766,	-0.347859473554797,	-0.089300971656411,	0.142027393193559};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}
		/* objective function */
		f1 = e[0];
		for (j = 0; j < nx; j++)
		{
			if (Double.compare(e[j],f1)>0)
			{
				f1 = e[j];
			}
		}		
		
		f = f1;
		return f;
	}
	
	private static double C03(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		
		double[] x = position;
		double[] e = new double[nx];
		
		double f, f1;
		double[] o = {111.17633500088529,	92.07880492633424,	417.9818592609036,	253.16188128024302,	363.5279986597767,	314.334093889305,	187.32739056163342,	240.4363027535162,	422.60090880560665,	327.63042902581515,	62.04762897064405,	25.435663968682125,	360.56773191905114,	154.9226721156832,	33.161292034425806,	177.8091733067186,	262.58198940407755,	436.9800562237075,	476.6400624069227,	331.2167787340325,	75.205948242522,	484.33624811710115,	258.4696246506982,	419.8919566566751,	357.51468895930395,	166.3771729386268,	47.59455935830133,	188.20606700809785,	184.7964918401363,	267.9201349178807};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
			//e[j]= x[j];
		}
		
		/* objective function */
		f1 = 0.0;
		
		for (j = 0; j < (nx - 1); j++)
		{
		
			f1 = f1 + (100 * Math.pow((e[j] * e[j] - e[j+1]),2) + Math.pow((e[j] - 1),2));
			 
		}
		
		f = f1;
		
		return f;
	}

	private static double C04(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		
		double[] x = position;
		double[] e = new double[nx];
		
		double f, f1;
		double[] o = {0.820202353727904, 5.260154140335203,	-1.694610371739177,	-5.589298730330406,	-0.141736605495543,	9.454675508078164,	8.795744608532939,	9.687346331423548,	-3.246522827444976,	6.647399971577617,	1.434490229836026,	-0.506531215086801,	0.558594225280784,	7.919942423520642,	1.383716002673571,	-1.520153615528276,	-2.266737465474915,	6.48052999726508,	-8.893207968949003,	-3.528743044935322,	6.063486037065154,	-4.51585211274229,	7.320477892009357,	-8.990263774675665,	9.446412007392851,	-6.41068985463494,	-9.135251626491991,	2.07763837492787,	8.051026378030816,	-1.002691032064544};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}
		
		/* objective function */
		f1 = e[0];
		
		for (j = 0; j < nx; j++)
		{
			if (Double.compare(e[j],f1)>0)
			{
				f1 = e[j];
			}
		}
		
		f = f1;
		
		return f;
	}
	
	private static double C05(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		
		double f, f1;
		
		double[] x = position;
		double[] e = new double[nx];
		
		double[] o = {72.10900225247575,	9.007673762322495,	51.86632637302316,	41.365704820161,	93.18768763916974,	74.53341902482204,	63.745479932407655,	7.496986033468282,	56.16729598807964,	17.71630810614085,	28.009655663065143,	29.36357615570272,	26.966653374740996,	6.892189514516317,	44.29071160734624,	84.35803966449319,	81.16906730972529,	92.76919270133271,	3.826058034047476,	7.231864548985054,	14.446069444832405,	46.49943418775763,	22.155722253817412,	69.11723738661682,	88.99628570349459,	58.74823912291344,	52.265369214509846,	47.030120955005074,	53.23321779503931,	5.778976086909701};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}
		
		/* objective function */
		f1 = e[0];
		for (j = 0; j < nx; j++)
		{
			if (Double.compare(e[j],f1)>0)
			{
				f1 = e[j];
			}
		}
		f = f1;
		
		return f;
	}
	
	private static double C06(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		
		double f, f1;
		double[] e = new double[nx];
		double[] x = position;
		double[] o = {-1.595515627742907,	7.633467047559741,	-5.764100483472472,	8.103197246263033,	-0.059515969417191,	-0.737189363693078,	-9.190862358160823,	4.22087353933443,	-1.745435308213725,	9.499044614342985,	3.82068618551277,	2.569334886907409,	9.354368119489862,	-0.852114934846258,	4.714177466874696,	6.775420647884232,	-9.074204717422479,	-3.760650327490145,	-0.77805530989772,	-7.487007842931314,	4.435061566086135,	-6.952711886757461,	-8.752326993212105,	-2.411334215593357,	-6.149894283287328,	1.049303005795593,	-6.049093253116644,	0.950328133373404,	1.443084229017085,	-0.163829799788475};
		 
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}
		
		/* objective function */
		f1 = e[0];
		for (j = 0; j < nx; j++)
		{
			if (Double.compare(e[j],f1)>0)
			{
				f1 = e[j];
			}
		}
		f = f1;
		return f;
	}
	
	private static double C07(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double f, f1;
		double[] e = new double[nx];
		double[] x = position;
		
		double[] o = {-1.46823271282738,	47.51401860909492,	-30.421056514069576,	-7.707941671844303,	-21.74698421666629,	-17.88116387879569,	5.274442455807971,	18.71403753778708,	-36.959734507345146,	-20.72950462154263,	25.4701966548936,	-25.439992885801573,	1.054563129830697,	-31.556579857545657,	-19.320382777005047,	17.16774285348282,	34.66536814401755,	-31.803705714749462,	-12.926898387712775,	25.489686517508602,	-45.23000430753644,	36.31774710581284,	-18.38690515559357,	34.86816378160691,	-37.530671214167334,	19.288852618585977,	0.684612418754519,	-12.636795982748637,	15.005454148879409,	-40.468678588994315};
		
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}

		/* objective function */
		f1 = 0.;
		for (j = 0; j < (nx - 1); j++)
		{
		
			f1 = f1 + (100 * Math.pow(((e[j]+1) * (e[j]+1) - (e[j+1]+1)),2) + Math.pow(((e[j]+1) - 1),2));
			 
		}
		
		f = f1;
		
		return f;
		
	}
	
	private static double C08(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double[] x = position;
		double[] e = new double[nx];
		
		double f, f1;
		double[] o = {-1.46823271282738,	47.51401860909492,	-30.421056514069576,	-7.707941671844303,	-21.74698421666629,	-17.88116387879569,	5.274442455807971,	18.71403753778708,	-36.959734507345146,	-20.72950462154263,	25.4701966548936,	-25.439992885801573,	1.054563129830697,	-31.556579857545657,	-19.320382777005047,	17.16774285348282,	34.66536814401755,	-31.803705714749462,	-12.926898387712775,	25.489686517508602,	-45.23000430753644,	36.31774710581284,	-18.38690515559357,	34.86816378160691,	-37.530671214167334,	19.288852618585977,	0.684612418754519,	-12.636795982748637,	15.005454148879409,	-40.468678588994315};
		
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}


		/* objective function */
		f1 = 0.0;
		for (j = 0; j < (nx - 1); j++)
		{
		
			 f1 = f1 + (100 * Math.pow(((e[j]+1) * (e[j]+1) - (e[j+1]+1)),2) + Math.pow(((e[j]+1) - 1),2));
			 
		}
		f = f1;
		  
		return f;
	}

	private static double C09(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double f, f1;
		double[] e = new double[nx];
		double[] x = position;
		double[] o = {-41.03250252873486,	-35.70280591875908,	-48.66938576680659,	94.51946988004894,	31.68700466174738,	99.69508270219342,	30.778279925351967,	-31.041222172110807,	-46.21010370947247,	27.26190010072706,	-2.093622677920422,	22.246274570582585,	-42.887366421312436,	89.88377145577851,	-6.731523713182725,	97.86439204258224,	49.49993772881544,	23.210695390854696,	-81.36716857155828,	-20.15688556597543,	36.692155371634726,	44.37408948075327,	-15.984549833405907,	-49.68391424581281,	98.3715576810595,	0.127593155843627,	61.709914317965655,	-84.0189999580673,	-35.39565398431638,	-5.143979333218638};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}		 
		
		/* objective function */
		f1 = 0.0;
		
		for (j = 0; j < (nx - 1); j++)
		{		
			f1 = f1 + (100 * Math.pow(((e[j]+1) * (e[j]+1) - (e[j+1]+1)),2) + Math.pow(((e[j]+1) - 1),2));			 
		}
		
		f = f1;
		
		return f;
	}

	private static double C10(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double[] x = position;
		double[] e = new double[nx];
		
		double f, f1;
		double[] o = {-41.03250252873486,	-35.70280591875908,	-48.66938576680659,	94.51946988004894,	31.68700466174738,	99.69508270219342,	30.778279925351967,	-31.041222172110807,	-46.21010370947247,	27.26190010072706,	-2.093622677920422,	22.246274570582585,	-42.887366421312436,	89.88377145577851,	-6.731523713182725,	97.86439204258224,	49.49993772881544,	23.210695390854696,	-81.36716857155828,	-20.15688556597543,	36.692155371634726,	44.37408948075327,	-15.984549833405907,	-49.68391424581281,	98.3715576810595,	0.127593155843627,	61.709914317965655,	-84.0189999580673,	-35.39565398431638,	-5.143979333218638};

		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}
		
		/* objective function */
		f1 = 0.;
		
		for (j = 0; j < (nx - 1); j++)
		{
		
			f1 = f1 + (100 * Math.pow(((e[j]+1) * (e[j]+1) - (e[j+1]+1)),2) + Math.pow(((e[j]+1) - 1),2));
			 
		}
		
		f = f1;
		
		return f;
	}

	private static double C11(double[] position){
		
		int j, i, k, l;
		int nx = Run.DIMENSIONS;
		double[] x = position;
		double[] e = new double[nx];
		double[] y = new double[nx];
		double[][] M = new double[nx][nx];
		double f, f1;
		double[] o = {0.786412832829728,	0.224970263937584,	0.534200883186777,	0.708371248558908,	0.163080926857473,	0.768660589584868,	0.1762692231182,	0.310310542254487,	0.279811607250377,	0.825543830090833,	0.847363744014823,	0.442103825982325,	0.84951329245954,	0.523004716844064,	0.044699072032802,	0.792400388660219,	0.292824262720788,	0.178722825110973,	0.549380820517875,	0.352736549012222,	0.080102993555225,	0.853135372349337,	0.790965386853156,	0.951634097517732,	0.809945865440195,	0.313724260202943,	0.241711589286433,	0.546972335229794,	0.270900015013911,	0.389639306011642};
		
		double[][] M1 = {{0.089633918378866,	 0.512130446273224,	 0.485514077203757,	-0.252958672779915,	 0.252770541915915,	 0.282726797116408,	 0.011481584098212,	 0.501645726490125,	 0.182717825231853,	 0.031348100000026},
		 {-0.280115239342013,	-0.237293103798464,	 0.161291392367593,	-0.283707496604443,	 0.364811930990744,	-0.062761689119337,	-0.739185429285342,	-0.191267363255477,	 0.163852853571301,	-0.108948351728692},
		 {-0.054128359479101,	 0.280409298113112,	-0.705443683949621,	-0.251735861726835,	 0.296849031180373,	-0.090813013702513,	-0.065957070182011,	 0.30050375022829,	-0.272322162400478,	-0.303711147333872},
		 {-0.452847886193739,	 0.236523261801994,	-0.24521824465,	-0.081379588794718,	-0.24525780464972,	 0.37821495392415,	-0.18193070994583,	-0.056246704353941,	-0.093664221220625,	 0.651150911995366},
		{0.361083640107602,	 0.399352960578869,	-0.140221518169126,	 0.501290666120365,	 0.227775075396437,	-0.344871729183228,	-0.325346508438507,	-0.093040278786845,	 0.207431987018326,	 0.332909212543853},
		 {-0.327366108426422,	-0.034166615485878,	 0.168579539272942,	-0.231702366911964,	 0.292800433946541,	-0.648132837341469,	 0.361448041200678,	 0.046154155969474,	-0.131239528768862,	 0.392112292683837},
		 {-0.416908196358713,	-0.161816318805297,	-0.179541440127106,	 0.415157611173291,	 0.440167850594149,	 0.25787201771071,	 0.30374321406454,	 0.077672586210717,	 0.481631833482542,	-0.070029679148627},
		 {-0.082769326821527,	-0.296458567384547,	-0.095392668680313,	 0.079070267285698,	-0.410370494920092,	-0.277529903950391,	-0.232372087468556,	 0.707837046116306,	 0.291065711969018,	 0.068801000678567},
		 {-0.314851017910477,	 0.037408462116577,	 0.292343317100224,	 0.548829235267724,	 0.065696886904918,	 0.012681873453724,	-0.181476896332993,	 0.21693059635943,	-0.634666974725221,	-0.159748150960876},
		{0.433769285221923,	-0.520307620610873,	-0.07481810354657,	-0.026992353432197,	 0.388158769389856,	 0.286598385013371,	-0.018393693541829,	 0.231063340808058,	-0.277653756652504,	 0.413729117675976}};
		 
		
		double[][] M2 = {{0.213664507653598,	 0.081181994864055,	 0.109287504638465,	-0.025177866704494,	 0.022222285306807,	-0.042656953236281,	-0.064708019281558,	-0.166881530892857,	-0.049029069752717,	-0.352822537935909,	-0.10560659182506,	0.172325114774526,	0.151840000333581,	0.226141562503423,	0.098785038088718,	-0.038046518396688,	0.064354476751985,	-0.397839588660246,	-0.035803778238277,	0.143522858437253,	-0.132896510459094,	0.0776878752635,	-0.230960330142614,	-0.065023068412763,	-0.324799719792717,	-0.394410999051323,	-0.064406717392709,	0.113744829639383,	0.311387845557846,	-0.083797609752818},
		 {-0.271700088866788,	-0.019398284664685,	-0.147690031630542,	-0.14646895298845,	 0.009734059809619,	-0.360263733874311,	-0.08446685711877,	0.074923689193188,	-0.163935979878233,	0.235507396752789,	0.109294373655602,	0.275570585394534,	-0.342781812122196,	-0.097283082956871,	0.000965683202336,	-0.364649787402838,	-0.120741535426983,	0.081333703172679,	0.187707474611139,	0.012291646647864,	-0.24973965974932,	0.147605133728092,	-0.236914164871624,	0.140203023828278,	-0.090596746744275,	-0.079951967559402,	0.041339061451822,	-0.143083898074293,	0.215812964283571,	-0.099342527132328},
		 {-0.067990719526256,	 0.265087739087109,	 0.069641500406529,	-0.075142020476545,	 0.342414425640308,	 0.193955025198242,	-0.119407721016019,	0.182485692744089,	0.078232269648152,	0.201926600459772,	-0.118697625348229,	-0.043262798962201,	0.372144060227865,	-0.015090449753815,	0.191694088533503,	-0.158605317529149,	0.112058863065475,	0.02590233184065,	0.203619627876814,	-0.064290403099129,	-0.02432596986466,	0.049145901961444,	0.229396848321773,	-0.05297004437931,	-0.065000670782875,	0.070701153673056,	0.453255361840545,	-0.083935114638238,	0.31146341510963,	-0.112829838156669},
		 {-0.030968898341742,	-0.050888797506771,	 0.030830254756601,	 0.04178819557194,	 0.065658071283464,	 0.450923351464843,	 0.214706791003811,	-0.323207360495052,	-0.008354103400074,	-0.053133505933914,	-0.195866183390291,	0.187102471622905,	-0.206804305716109,	0.101819425389,	 -0.11082652699642,	-0.39711167566239,	0.123494232660844,	0.053736727436837,	0.096036627871671,	-0.019258600848078,	-0.219821668806651,	-0.253908923606591,	0.005089036974723,	0.127991628463459,	0.037075803520335,	0.010378302018138,	0.143684554656654,	0.095817813086981,	-0.050150939862002,	0.381333412629458},
		{0.226288151720664,	 0.24606116722381,	 0.106911720534849,	 0.47292916025144,	 0.080821596642439,	-0.106639568044331,	-0.25871955956032,	-0.067303307998019,	-0.223306723802896,	0.118314382149731,	0.092493331574002,	-0.160569418944115,	-0.239227946040776,	0.159833124584156,	-0.097589784005531,	0.088561998405886,	-0.176607551065602,	0.220391576923025,	0.118673673892537,	0.172529373109131,	-0.052521621702833,	-0.302376571169939,	0.057527555491466,	-0.051198984930294,	-0.151934969640591,	-0.20288907211878,	0.237694257469852,	0.011731349236642,	-0.121683054008454,	-0.077562196214513},
		 {-0.023341124631582,	-0.106367398061812,	 0.139185062166589,	-0.023708842343116,	-0.122924349219742,	-0.317270751931269,	 0.09085932216237,	-0.004003755978159,	0.081504361166746,	0.051004055378783,	0.087122807098326,	0.065197475901265,	0.326987038415912,	0.149191719081344,	0.059533213153922,	-0.289471752269275,	0.036292592579316,	0.051991150593147,	0.423393392470416,	0.14243832552759,	0.26694616322671,	-0.033149461153889,	-0.06238762331634,	-0.017742808969348,	0.224077199443182,	-0.164572449247675,	0.081131000428636,	0.411086190636973,	-0.270016145919628,	0.025440356389857},
		{0.217340969946372,	-0.010887941365408,	-0.105414165411544,	 0.028640113752392,	 0.245192353428576,	 0.123453698955525,	-0.22027448510549,	0.080008470401683,	-0.200064078714725,	0.409080331693645,	-0.01164832823722,	0.149285163400367,	0.212696285382057,	-0.036842592163519,	-0.184563269192621,	0.099675386172013,	-0.104962991127113,	-0.351644037772175,	0.003612814494479,	0.119290352639962,	0.014038386652626,	-0.078680586178529,	-0.257539407999236,	0.356517750088968,	0.065999684745291,	0.244698740520543,	-0.16125727875757,	0.200412631256186,	-0.047032406403128,	0.093230368282809},
		 {-0.308047033323461,	 0.302782029048974,	 0.0322661459595,	 0.106587658429326,	-0.168271630981503,	-0.070035690780841,	-0.051571249957414,	0.097566654836796,	0.098375409745765,	0.151603976234746,	0.057525783219635,	-0.286426352771457,	0.024343824914064,	-0.169780687940365,	0.022380508340654,	-0.030982311876094,	0.415717134652659,	-0.197521326266871,	0.088420077973385,	0.011114954697741,	-0.263872664453069,	-0.375124011890858,	-0.011430439277577,	-0.07452629391033,	0.016003087509299,	-0.065727200479196,	-0.373774336560803,	0.105840318864163,	0.100418169473233,	0.073219551853995},
		{0.200163577534198,	-0.039678659465808,	 0.379527614131999,	-0.099745969482936,	-0.221373690414668,	-0.148184040663515,	 0.218923185321619,	0.16342688952909,	0.106160271957917,	0.128647167415555,	-0.263722004680904,	-0.073799506832126,	-0.130373260973961,	0.05112747364289,	-0.275651806010854,	0.164362590475763,	-0.193891035029316,	-0.231705892488554,	0.203407120866966,	-0.180088567449336,	-0.217043829626228,	-0.065298093403581,	-0.168646979873782,	-0.249526662066186,	0.142398466204126,	0.184373897375203,	0.214617996769777,	-0.037763990107245,	0.153370753506811,	0.029960427580481},
							{0.027381106799167,	 0.025298590700846,	 0.085102913098931,	 0.235161900850573,	 0.088822124808788,	-0.147746689766744,	 0.287007437228783,	0.059680973101153,	-0.083383065195545,	-0.031229323155654,	0.031553099382079,	0.40509260167075,	-0.066928120228784,	-0.029895161415616,	0.160569988999854,	0.16678557709598,	0.254241427727434,	0.231808030036861,	-0.219633335492758,	-0.018225943045591,	0.205429075567088,	-0.287803693680246,	-0.159043658666998,	0.00879409803725,	0.165691311194281,	0.193758433635177,	0.054989913382989,	0.187140153188654,	0.381913634751314,	-0.148889172210388},
							 {-0.193804968887996,	-0.065126964033178,	 0.301214940522026,	 0.235589681539659,	-0.103550074605781,	 0.108383273427244,	-0.105180685554545,	0.023625536573582,	0.01996270869354,	-0.197178099155744,	-0.005579002923688,	-0.105996290889411,	-0.201484156798754,	-0.016580477043595,	0.096437307973893,	-0.265258984515337,	-0.038285680241242,	-0.297437900623478,	0.110282050166409,	0.340831537665284,	0.353344803948875,	0.023969199411952,	-0.037508048676323,	0.084467945077494,	-0.101339199091876,	0.43127923493617,	-0.012803021754092,	-0.187066022130407,	0.045422882183782,	-0.145164655232891},
							 {-0.188010538259573,	 0.072561095841883,	-0.215861415006047,	 0.340625060094133,	-0.271380094003135,	 0.011550630486271,	-0.021562277822991,	-0.047039032262669,	0.24569627934439,	0.06878748082518,	-0.013753922818236,	0.128800076934912,	0.251945144841963,	-0.065565948950666,	-0.247270548381727,	-0.049324630517431,	-0.283284532614162,	-0.056856284381622,	-0.038971423817489,	-0.252726173186928,	0.351734439125858,	-0.110658990096839,	-0.106510561670422,	0.03737869055179,	-0.115271643539905,	-0.196770239210232,	0.068745507207565,	-0.202290191092434,	0.230742566811053,	0.242089942893867},
							{0.009670899760703,	 0.19086441968746,	-0.162303316721271,	 0.064683931277254,	 0.164443149200815,	-0.323437173681877,	 0.298292486419165,	-0.287839297934076,	0.103447987260199,	0.066558230735603,	-0.00811153653084,	-0.267028782102504,	-0.109803324276942,	0.030622270397094,	-0.238104734999257,	-0.210337042122685,	-0.039664653707487,	-0.272682220581616,	-0.289034258391312,	-0.056713148536939,	0.041560290546935,	0.135947625574874,	0.288994345741835,	0.171226457682862,	0.020154597183878,	0.087557724549144,	0.128411957307537,	0.266870366178292,	0.074920714589854,	-0.178633022967889},
							{0.058380141741122,	-0.067241741998389,	-0.107729007864175,	-0.056331784327996,	-0.168481007769024,	 0.262125246984163,	-0.007371786978638,	0.164927818594684,	-0.036933870960258,	0.267509327915296,	0.368795934127986,	-0.04754732992007,	-0.164871757638282,	0.316046246052052,	0.326208946153877,	-0.210383643418226,	-0.148743568976932,	-0.27228848616751,	-0.298371974359424,	-0.079114502261498,	0.05112487825332,	-0.103950446102005,	-0.01564162533912,	-0.270929678785201,	0.227289734744482,	-0.122956418941428,	0.102700134174179,	0.066767014869907,	0.049550920130668,	-0.033845164172596},
							 {-0.086630774192244,	-0.114904967536104,0.070689120361513,	-0.034071515269466,	 0.122164936018725,	-0.185544714908452,	-0.269907389645905,	0.053128966344123,	0.063580062903748,	-0.230905233848124,	0.130786631191676,	0.203748730532203,	0.130738123136379,	-0.063121304824537,	-0.291378414288447,	-0.043225535031358,	-0.01069469449417,	-0.116151001188632,	-0.23721367266419,	0.350947535209623,	-0.186552245007249,	-0.152639157418694,	0.254048004058081,	-0.092165966765819,	0.455200922690338,	-0.07128324467846,	0.136761821923458,	-0.205729179281477,	0.069566872999856,	0.148165641059529},
							{0.094081789475437,	 0.164525371012304,	 0.530381662137654,	-0.125311053655768,	 0.103697488442664,	-0.121905535749908,	 0.056068298081543,	0.006703334135084,	0.036583551377082,	0.19140471505715,	0.039561231445405,	-0.055422919551433,	0.022569682208961,	0.296355942714072,	0.072278015477743,	-0.112500040523406,	-0.080236580672682,	0.19033073835967,	-0.174276465756524,	-0.065077925843275,	0.115236637819618,	0.066402495691896,	0.114332383707042,	0.305300264476914,	0.041924689523625,	-0.114010854564669,	-0.352544042259548,	-0.244055210901362,	0.13019634886009,	0.269526775862334},
							 {-0.00489419108819,	-0.3059705776172,	 0.311548390724184,	-0.141572289005789,	-0.203176699858192,	-0.026095435739131,	-0.065157179843688,	-0.038350549407962,	-0.073662373827209,	0.142157446085444,	0.157373461407893,	-0.046099550200634,	0.224210978651247,	-0.298335544413649,	-0.073612901848245,	-0.159247698378578,	-0.051909721672664,	0.145993068464936,	-0.36519319549698,	0.032297295074329,	-0.109562705494831,	-0.167000876200342,	0.043268603623865,	-0.035859010210215,	-0.484116022339656,	0.09192729037904,	0.155163485816933,	0.224679527158001,	0.003313807587358,	0.011812567832784},
		 {-0.079164184231885,	-0.079673141928438,	 0.047991031562159,	-0.093766613853708,	 0.31417752040776,	-0.056911358204846,	 0.362675633792648,	-0.060338425113277,	-0.280182381876974,	0.018772162685462,	0.051300062700589,	-0.049623674415283,	0.176261753739058,	-0.060467833054284,	-0.076986055167777,	-0.086777151803824,	0.049098470056174,	-0.187178075938113,	-0.014362935091577,	-0.12289914106784,	0.118233415764786,	-0.341422902426496,	-0.167949488567614,	-0.105989559529699,	-0.060591056127266,	-0.15239285521963,	0.002181073424684,	-0.462669300934778,	-0.297768213927992,	-0.23380321131751},
		 {-0.378516156455358,	-0.1433149891874,	 0.047248285574843,	 0.072629998044244,	 0.149384001121451,	 0.237240860059944,	 0.140303661447484,	0.20066037622952,	0.035463732796464,	-0.106195572441474,	-0.031516316526196,	-0.002151701441264,	0.1120768051884,	0.270901510772577,	-0.200351435603717,	0.03852665027653,	-0.418916524751717,	0.143638180001652,	0.061776304496446,	0.033980452524636,	-0.193528759911095,	-0.110620722807679,	0.109607952267434,	0.03346002081992,	-0.014672688437202,	-0.043724266514642,	-0.280786021801147,	0.235169251004673,	0.118943568855134,	-0.366995339144498},
		 {-0.090339156130256,	 0.258102936725341,	-0.082642825321426,	-0.177874017144745,	 0.001268583195314,	-0.105702469885669,	-0.090199054235473,	0.094582271703797,	-0.043622730291984,	-0.345727234198456,	-0.209942734609341,	-0.30615350519884,	0.090529904558773,	-0.041653675014824,	0.255573298859712,	-0.100282747841932,	-0.309584581927906,	0.124877004928111,	-0.223740676264403,	-0.031268448227269,	-0.066373754125275,	-0.222674185629732,	-0.403563586099264,	0.212127520816293,	0.167001816786667,	0.094847203771669,	0.173262511782359,	0.085443515162292,	-0.069914437636284,	0.102643402622927},
		{0.055440475109441,	 0.085951891879032,	 0.172992547024373,	 0.262905477453187,	 0.224743205594987,	 0.192540830845651,	 0.110061418307678,	0.113827332043669,	-0.168469541416164,	-0.04800537454653,	0.103346160688271,	-0.180941765207566,	0.011325240855003,	-0.37937643896595,	-0.182592630006882,	-0.221956531577796,	-0.027987786008159,	0.116676051648963,	-0.077346609370271,	0.016773991056786,	0.030200744490138,	0.418769276358264,	-0.283443734028498,	-0.294586681085427,	0.197167046347308,	-0.163506777011674,	-0.103837075932755,	0.134058921059171,	0.081801487643389,	0.109353676269996},
		{0.327360471359169,	-0.28072048808365,	-0.163555479309503,	 0.31919381862241,	 0.063611972539563,	-0.214486982533365,	-0.157654777857054,	0.180549631755488,	-0.055285854531161,	-0.186429790904586,	-0.068249197353824,	-0.064677706786589,	0.152817049718154,	0.144643068264453,	0.056012720322906,	-0.382743611197267,	0.074505674218174,	0.050078384096382,	0.030018371634662,	-0.384023043648669,	-0.184612676085607,	-0.055459493703995,	0.10084350694568,	-0.081489460313665,	-0.021712726717977,	0.262680866816756,	-0.221178011925896,	-0.086134078535059,	0.031300536165372,	0.011861695055184},
		{0.012964948275638,	 0.187786072616282,	-0.056369451537001,	-0.289348154058947,	 0.267823758425312,	-0.088036659356012,	-0.133230824780343,	-0.304146488281969,	0.015965034670596,	-0.050127979326313,	0.106949329082003,	0.103272761307408,	-0.07919152944579,	-0.073430347934756,	0.026235112233403,	-0.021541007721428,	-0.293978552332072,	0.023684646076276,	0.156645243190832,	-0.048501664763,	0.197787704307392,	-0.194211661422967,	0.080180820135367,	-0.496906269530592,	-0.104584005315891,	0.258873613013138,	-0.259649539738847,	0.123811379191117,	0.111293522081587,	0.181939407958772},
		{0.294835878808858,	-0.029209022921241,	-0.217723946054288,	-0.097404777024707,	-0.052429134815045,	 0.040356030871308,	 0.393236833225354,	0.175557179390611,	-0.03094063400247,	-0.177963860281272,	0.449916685915366,	-0.213456939438994,	0.058508695099448,	-0.094405596522676,	-0.008625355411711,	0.039160284839969,	-0.098625835561265,	0.03408199804298,	0.28011442570154,	0.268665001951654,	-0.05434462021136,	-0.110027495654122,	0.08235063573064,	0.205944827529079,	-0.102051034805319,	0.041742870426194,	0.0207325192601,	-0.092449553345455,	0.289687544712165,	0.200232137666344},
		{0.324562283237417,	 0.184648348712247,	 0.022446625011167,	-0.217977077322926,	-0.245608197072427,	 0.223028741194813,	-0.191885672937206,	-0.234565861266814,	0.163142136227469,	-0.034483774167611,	0.136829944775942,	0.010659321371311,	0.043886061930328,	-0.10015800029478,	-0.260708326142898,	-0.209912729155911,	0.074289636558659,	0.192908976804704,	0.05279894151016,	-0.083703330879473,	0.044462302715181,	-0.10922321061719,	-0.119520743996587,	0.115312784885046,	0.219184418022002,	0.006476796614963,	-0.099039640423129,	-0.09552952028645,	0.090279102663188,	-0.520408674965181},
		{0.189874262576368,	-0.095312769672106,	 0.023229777012101,	 0.114052756900062,	-0.095698687766527,	 0.00435622515588,	 0.104383153814706,	-0.101851026410131,	-0.036031847418115,	0.130809079398388,	-0.348176020977506,	0.083868330339566,	-0.008027489258884,	-0.475250515495636,	0.405075360910557,	-0.058330958272204,	-0.324799136178965,	-0.098826394313126,	0.054201621445373,	0.105539013031662,	-0.050165348263293,	-0.110988043058241,	0.307823877172309,	0.065638607280896,	0.175611728595002,	-0.225527874730007,	-0.167576013387015,	-0.025898462181195,	0.047977681482798,	-0.121614920666241},
		{0.024817395005562,	-0.17487826875149,	-0.075479150475883,	 0.189943924393605,	 0.156145281833982,	-0.055799107787251,	 0.097805210291524,	-0.333519405775061,	0.502960649221461,	0.250717861251373,	0.037973315883562,	-0.117614481392449,	0.150749952794974,	0.100713451865893,	0.194650730577328,	0.041542080273073,	-0.043075295232123,	0.14346659720724,	-0.066416684640206,	0.30945572209412,	-0.26079323424583,	0.060654388815103,	-0.330908639343534,	-0.133139659765055,	0.007715506835614,	0.129099603050523,	-0.026526508575731,	-0.186033367233492,	-0.003227201944237,	-0.039533548327422},
		{0.095784409010262,	 0.493960649899082,	 0.054965293016426,	 0.118386898900744,	-0.089743887601218,	 0.011108183624052,	 0.207327445064612,	0.242443769099025,	0.206198128469745,	-0.07993765597308,	0.158376106471485,	0.44069018725539,	0.080476930007356,	-0.063999018485218,	0.045791410027783,	-0.109218662101228,	-0.133146601849485,	-0.063457328740753,	-0.098077643442681,	0.030229627867435,	-0.22587886702408,	0.088840219102173,	0.060713279234327,	-0.042942042030938,	-0.162299014039001,	0.166693220455956,	-0.036996741605182,	-0.03566092366649,	-0.415251090818235,	-0.033476312360835},
		 {-0.134737022651914,	 0.178824441680756,	-0.065367644831629,	 0.070421716758178,	-0.380997368249991,	-0.001424117236101,	 0.111786488541009,	-0.315238045340073,	-0.564567583141614,	0.075644045120957,	-0.04106733803819,	0.001359106777444,	0.342613474532435,	0.18843734841569,	0.016632274309598,	0.028151100670402,	-0.040804196229357,	0.078149572314004,	-0.009015740224079,	0.124083718002042,	-0.154078742598099,	0.184197151976838,	0.073620529124081,	-0.129123672253497,	0.132520067351779,	0.24339516107792,	-0.028784979253861,	-0.122593877628548,	0.087287100630432,	0.014242700063557},
		 {-0.151931107719764,	-0.0663705228758,	 0.273691836188752,	 0.166063639310765,	 0.083603614767844,	 0.012365248008479,	-0.096837151548972,	-0.323046786194128,	-0.002762106981556,	-0.162979039714608,	0.457731335540932,	0.030662875665406,	0.044328722462083,	-0.132362192693964,	0.204392438255486,	0.213174368356641,	-0.108362051125394,	-0.179307935282083,	0.178742296246812,	-0.435746945897502,	-0.211500176759846,	0.068172045884552,	-0.005852335257529,	0.225384707452164,	0.144166264871071,	0.041229273569432,	0.118238109507269,	0.053070226894351,	-0.013323395106702,	-0.005285812892181}};
		
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
			y[j] = 0.0;
			if (Double.compare(nx,10.0) == 0)
			{
				for ( l = 0; l < nx; l++){
					M[l][j] = M1[l][j];
				}
			}
			if (Double.compare(nx,30.0) == 0)
			{
				for ( l = 0; l < nx; l++){
					M[l][j] = M2[l][j];
				}
			}
		}
		
		for (i = 0; i < nx; i++)
		{
			for (k = 0; k < nx; k++)
			{
				y[i] = y[i] + e[k] * M[k][i];
			}
		}


		/* objective function */
		f1 = 0.;
		
		for (j = 0; j < nx; j++)
		{		
			f1 = f1 - y[j] * Math.cos(2 * Math.sqrt(Math.abs(y[j])));				
		}
		
		f = f1/((double) nx);		
		return f;
	}

	private static double C12(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double f, f1;
		double[] e = new double[nx];
		double[] x = position;
		double[] o = {18.889635068428205,	-59.265426383246485,	33.25998466165768,	20.152694275194037,	-10.734106238462502,	-90.85053128520764,	-12.073899411249897,	59.72307696259165,	-37.44193247323578,	25.963111555782035,	6.251460324561279,	41.478172862575434,	86.54258849813075,	34.94822787072172,	26.864471649916382,	79.55580868986908,	-44.66218241775459,	-7.305741544994362,	87.75843366209835,	33.836473236958284,	84.53385936725138,	80.89850629751817,	48.46967726645195,	-82.0758049330533,	-98.54273249151939,	19.55069746505636,	8.33657824668768,	88.54888769408086,	-79.08282398956031,	63.254014133387614};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}

		/* objective function */
		f1 = 0.0;
		
		for (j = 0; j < nx; j++)
		{
		
			f1 = f1 + e[j] * Math.sin(Math.sqrt(Math.abs(e[j])));
		
		}
		
		f = f1;
				
		return f;
	}

	private static double C13(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		int ng = 3;
		double[] x = position;
		double[] e = new double[nx];
		double[] g = new double[ng];
		double f, f1, g1, g2, g3;
		double PI = 4.0 * Math.atan (1.0);
		double[] o = {69.69311714880897,	1.509803311435702,	67.6746198312362,	80.43173609273597,	80.47622449424348,	51.21092936019716,	52.7723719926014,	17.248465789326257,	52.40150903116374,	39.64846247456716,	89.86375903333635,	32.079301315169474,	43.192499277837946,	70.79294586561508,	1.48440984483988,	19.8566700417119,	29.502667246412756,	34.256788127976684,	12.643016541338264,	78.57234385195876,	26.51647349482587,	97.06430708087798,	10.180504722002471,	82.90799886855778,	63.540231382573154,	74.78243308676124,	87.20817289266436,	50.779655804893764,	43.05412185616204,	33.862234518700916};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}
		/* objective function */
		f1 = 0.0;
		g1 = 0.0;
		g2 = 0.0;
		g3 = 1.0;
		
		for (j = 0; j < nx; j++)
		{
		
			f1 = f1 - e[j] * Math.sin(Math.sqrt(Math.abs(e[j])));
			g1 = g1 + e[j] * e[j];
			g2 = g2 + Math.sin((1/50.0) * PI * e[j]);
			g3 = g3 * Math.cos(e[j]/Math.sqrt(((double) (j+1))));
		
		}
		
		
		f = f1/((double) nx);
		g[0] = -50.0 + (1/(100.0 * ((double) nx))) * g1;
		g[1] = (50.0/((double) nx)) * g2;
		g[2] = 75.0 - 50.0 * (g1/4000.0 - g3 + 1.0);
		
		return f;
	}

	private static double C14(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double[] x = position;
		double[] e = new double[nx];
		double f, f1;
		double[] o = {-31.718907007204272,	-39.536680684207184, -46.033718058035944,	-42.2004014684422,	-28.331307546159135,	-38.64403177375364,	-11.313371899853626,	-11.717383190039943,	-43.345049558717875, -31.46016185891229,	-35.57742732758397,	-45.49638850141341,	-4.177473725277878,	-26.974808661067083,	-46.30991533784743,	-45.997883193212814,	-29.479673271045964,	-4.336542960830036,	-43.66244285780764,	-22.43896852522004,	-25.89273808052249,	-24.221450510218993,	-30.3952886350567,	-31.170730638052895,	-9.859463575974534,	-16.727846507426452,	-44.35226340706524,	-33.10843069426064,	-7.175153678947718,	-4.601421202670486};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}
		/* objective function */
		f1 = 0.0;
		
		for (j = 0; j < (nx - 1); j++)
		{
		
			f1 = f1 + (100 * Math.pow(((e[j]+1) * (e[j]+1) - (e[j+1]+1)),2) + Math.pow(((e[j]+1) - 1),2));
		 
		}
		
		f = f1;
		
		return f;
	}

	private static double C15(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double[] x = position;
		double[] e = new double[nx];
		double f, f1;
		double[] o = {-31.718907007204272,	-39.536680684207184, -46.033718058035944,	-42.2004014684422,	-28.331307546159135,	-38.64403177375364,	-11.313371899853626,	-11.717383190039943,	-43.345049558717875, -31.46016185891229,	-35.57742732758397,	-45.49638850141341,	-4.177473725277878,	-26.974808661067083,	-46.30991533784743,	-45.997883193212814,	-29.479673271045964,	-4.336542960830036,	-43.66244285780764,	-22.43896852522004,	-25.89273808052249,	-24.221450510218993,	-30.3952886350567,	-31.170730638052895,	-9.859463575974534,	-16.727846507426452,	-44.35226340706524,	-33.10843069426064,	-7.175153678947718,	-4.601421202670486};
		 
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}

		/* objective function */
		f1 = 0.0;
		
		for (j = 0; j < (nx - 1); j++)
		{
		
			f1 = f1 + (100 * Math.pow(((e[j]+1) * (e[j]+1) - (e[j+1]+1)),2) + Math.pow(((e[j]+1) - 1),2));
			 
		}
		
		f = f1;		
		return f;
	}

	private static double C16(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double[] x = position;
		double[] e = new double[nx];
		double f, f1, f2;
		double[] o = {0.365972807627352,	0.429881383400138,	-0.420917679577772,	0.984265986788929,	0.324792771198785,	0.463737106835568,	0.989554882052943,	0.307453878359996,	0.625094764380575,	-0.358589007202526,	0.24624504504104,	-0.96149609569083,	-0.184146201911073,	-0.030609388103067,	0.13366054512765,	0.450280168292005,	-0.662063233352676,	0.720384516339946,	0.518473305175091,	-0.969074121149791,	-0.221655317677079,	0.327361832246864,	-0.695097713581401,	-0.671724285177815,	-0.534907819936839,	-0.003991036739113,	0.486452090756303,	-0.689962754053575,	-0.138437260109118,	-0.626943354458217};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}
		/* objective function */
		f1 = 0.0;
		f2 = 1.0;
		
		for (j = 0; j < nx; j++)
		{
			f1 = f1 + e[j] * e[j];
			f2 = f2 * Math.cos(e[j]/Math.sqrt(((double) (j+1))));
		
		}
		
		f = f1/4000.0 - f2 + 1.0;
		
		return f;
	}

	private static double C17(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double[] x = position;
		double[] e = new double[nx];
		double f, f1;
		double[] o = {-0.628245703945122,	0.331024455127249,	0.402617203423807,	0.462742527496583,	-0.513329779137884,	0.288191632492259,	0.41479349370103,	0.916196063289011,	-0.427742767473712,	0.811971694633694,	-0.202953396286476,	0.786617208861492,	-0.583805982901842,	0.91666360939369,	-0.602135912772221,	0.503807046950863,	-0.196264987447976, -0.565579687152807,	0.540878947793462,	0.183666358669345,	-0.303576255198908,	-0.896405440407756,	-0.101939801890135,	-0.049819872322279,	0.434240825173134,	0.946552963504364,	-0.32578927683003,	-0.154255792477949,	0.577967633549953,	-0.573697797217518};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}

		/* objective function */
		f1 = 0.0;

		 for (j = 0; j < (nx - 1); j++)
		{
		
			f1 = f1 + Math.pow((e[j] - e[j+1]),2);
			 
		}
		 
		f = f1;
		
		return f;
	}

	private static double C18(double[] position){
		
		int j;
		int nx = Run.DIMENSIONS;
		double[] e = new double[nx];
		double[] x = position;
		double f, f1;
		double[] o = {-2.494401436611803,	-0.306408781638572,	-2.271946840536718,	0.381278325914122,	2.394875929583502,	0.418708663782934,	-2.082663588220074,	0.776060342716238,	-0.374312845903175,	0.352372662321828,	1.172942728375508,	-0.24450210952894,	1.049793874089803,	-1.716285448140795,	-1.026167671845868,	-1.223031642604231,	0.924946651665792,	0.93270056541258,	-2.312880521655027,	-0.671857644927313,	-0.312276658254605,	-0.973986111708943,	-0.454151248193331,	2.420597958989111,	0.050346805172393,	1.050203106200361,	-0.05420584346617,	-0.081533357726523,	-0.968176219532845,	1.682281307624435};
		for (j = 0; j < nx; j++)
		{
			e[j]= x[j] - o[j];
		}

		/* objective function */
		f1 = 0.0;

		 for (j = 0; j < (nx - 1); j++)
		{
		
			f1 = f1 + Math.pow((e[j] - e[j+1]),2);
			 
		}
		 
		f = f1;
				
		return f;
	}
	
	private static double test(double[] doubles) {

		int j;
		int nx = Run.DIMENSIONS;
		
		double[] x = doubles;
		double[] e = new double[nx];
		
		double epsilon = 0.0001;
		
		double h, h1;
		double[] o = {111.17633500088529,	92.07880492633424,	417.9818592609036,	253.16188128024302,	363.5279986597767,	314.334093889305,	187.32739056163342,	240.4363027535162,	422.60090880560665,	327.63042902581515,	62.04762897064405,	25.435663968682125,	360.56773191905114,	154.9226721156832,	33.161292034425806,	177.8091733067186,	262.58198940407755,	436.9800562237075,	476.6400624069227,	331.2167787340325,	75.205948242522,	484.33624811710115,	258.4696246506982,	419.8919566566751,	357.51468895930395,	166.3771729386268,	47.59455935830133,	188.20606700809785,	184.7964918401363,	267.9201349178807};
		for (j = 0; j < nx; j++)
		{
			//e[j]= x[j] - o[j];
			e[j]= x[j];
		}
		
		h1 = 0.0;
		for (j = 0; j < (nx - 1); j++)
		{
			h1 = h1 +Math.pow((e[j] - e[j+1]),2);			 
		}
		
		h = h1;
		
		double[] toReturn = {0.0, 0.0, 0.0};
		
		if(Double.compare(Math.abs(h),epsilon)>0){
			toReturn[0]+=1;
		}else{
			h=0.0;
		}
		
		double fi;
		
		if(Run.fiMaxSum){
			fi=Math.abs(h);
		}else{
			fi=Math.pow(Math.abs(h), Run.pForFi);
		}
		
		return -fi;
	}


}
