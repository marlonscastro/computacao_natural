import java.util.ArrayList;
import java.util.Random;

class Functions {
	public static void sphere(){
/*
 * 		switch (PROBLEM_TYPE) {
		case 1:
			for (int i = 0; i < dimension.length; i++) {
				fitness += Math.pow(dimension[i], 2);
			}
			break;

		case 2:
			//Rastring
			for (int i=0; i<dimension.length; i++){
				double cosineValue = Math.cos(2*Math.PI*dimension[i]);
				double pow = (Math.pow(dimension[i], 2));
				fitness = fitness + (pow - (10*cosineValue) + 10);
			}
			
//			for (int i = 0; i < dimension.length; i++) {
//				fitness += Math.pow(dimension[i], 2) - (10 * Math.cos(2 * Math.PI * dimension[i])) + 10;
//			}
			break;
			//Rosenbrock
		case 3:
			for (int i = 0; i < dimension.length-1; i++) {
				double temp1 = (dimension[i] * dimension[i]) - dimension[i + 1];
				double temp2 = dimension[i] - 1.0;
				fitness += (100.0 * temp1 * temp1) + (temp2 * temp2);
			}

			break;
		}*/		
	}
}

class Peixe{
	private double x;		// posicao peixe
	private double w;		// peso peixe
	public Peixe(){
		Random r = new Random();
		//Inicialize todos os peixes em posições xi(0) aleatórias e distantes do mínimo global;
		this.x = r.nextDouble();
		//Inicialize aleatoriamente o peso ~wi(0) de todos os peixes;
		this.w = r.nextDouble();
	}
}

class FSS {
	ArrayList<Peixe> peixes;
	// Recebe quantidade de Peixes e Iterações: provisório
	public FSS(int qPeixes, int it){
		peixes = new ArrayList<Peixe>();
		for(int i=0;i<qPeixes;i++){
			peixes.add(new Peixe());
		}
	}
	
	// Executa o algoritmo 
	public void executar(){
		
	}
}

public class Main {
	public static void main(String[] args) {
		

	}

}
