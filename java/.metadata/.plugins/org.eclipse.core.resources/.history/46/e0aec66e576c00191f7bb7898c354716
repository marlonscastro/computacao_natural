class Functions {
	public static double sphere(double[] dimension){
		double fitness = 0;
		for (int i = 0; i < dimension.length; i++) {
			fitness += Math.pow(dimension[i], 2);
		}
		return fitness;
/*
 * 		switch (PROBLEM_TYPE) {
		case 1:

			break;

		case 2:
			//Rastring
			for (int i=0; i<dimension.length; i++){
				double cosineValue = Math.cos(2*Math.PI*dimension[i]);
				double pow = (Math.pow(dimension[i], 2));
				fitness = fitness + (pow - (10*cosineValue) + 10);
			}
			
//			for (int i = 0; i < dimension.length; i++) {
//				fitness += Math.pow(dimension[i], 2) - (10 * Math.cos(2 * Math.PI * dimension[i])) + 10;
//			}
			break;
			//Rosenbrock
		case 3:


			break;
		}*/		
	}
	public static double rastrigin(double[] dimension){
		double fitness = 0;
		for (int i=0; i<dimension.length; i++){
			double cosineValue = Math.cos(2*Math.PI*dimension[i]);
			double pow = (Math.pow(dimension[i], 2));
			fitness = fitness + (pow - (10*cosineValue) + 10);
		}
		return fitness;
	}
	
	public static double rosenbrock(double[] dimension){
		double fitness = 0;
		for (int i = 0; i < dimension.length-1; i++) {
			double temp1 = (dimension[i] * dimension[i]) - dimension[i + 1];
			double temp2 = dimension[i] - 1.0;
			fitness += (100.0 * temp1 * temp1) + (temp2 * temp2);
		}	
		return fitness;
	}
	
}